------------------------------------------------------------
|                                                          |
|                                                          |
|    1 -- 2                       4 -- 5 -- 6              |
|         |                            |    |              |   Graph G1
|         3                            7 -- 8              |
|                                             \            |
|                                              9           |
|                                                          |
------------------------------------------------------------

#using BFS
adj list 
1 -> 2
2-> 3
3 -> 2
4 -> 5
5 -> 4,6,7
6 -> 8,6
7 -> 5,8
8 -> 6,7,9
9 -> 9

we create a visited Data structure
also a queue for bfs

we have to also track parent for each node

while doing bfs if we found a node is already visited and it is not it's paret means cycle is there

when we do bfs for 2nd comp of graph - 
 4 -> visited   parent(4)-> -1
 5 -> visited   parent(45)-> 4
    bfs for 5 ->
        6 -> visited  paren(6) -> 5
        7-> visited par (7)-> 5

    now for 6 -> 
        8 -> visited par(8) -> 6

Now when we perform bfs for 8,
        6 is already visited but it's his parent so we ignore it
        but 7 is also already visited and not his parent means CYCLE IS THERE

MEANS visited == TRUE && !PARENT   