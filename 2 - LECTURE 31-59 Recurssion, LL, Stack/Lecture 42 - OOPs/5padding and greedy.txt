Padding is the technique of adding extra bytes to a structure or class to align its data members to specific boundaries. This is done to ensure that the data members are accessed efficiently by the processor, which typically fetches data from memory in chunks of fixed sizes, such as 4 or 8 bytes.

Consider the following example:

class Example {
    char c;
    int i;
    short s;
};
In this example, the char data member requires only 1 byte of memory, while the int and short data members require 4 and 2 bytes, respectively. To align the int data member to a 4-byte boundary, the compiler will add 3 bytes of padding after the char data member, resulting in a total size of 8 bytes for the class.







Greedy alignment is a technique used to minimize padding by ordering the data members of a class in decreasing order of size. This ensures that the largest data members are placed first in the class, minimizing the amount of padding required to align the subsequent data members.

Consider the following example:

class Example {
    char c;
    double d;
    int i;
    short s;
};
In this example, the double data member requires 8 bytes of memory, which is larger than any of the other data members. If we reorder the data members as follows:

class Example {
    double d;
    int i;
    short s;
    char c;
};
We can eliminate padding between the double and int data members, resulting in a smaller overall size for the class. In general, greedy alignment can help to minimize memory usage and improve the performance of our code.